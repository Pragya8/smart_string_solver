continue
reflex_data
continue
 MessageReflex.new({:message=>"Hello, this is a test message!", :user_id=>1, :order_id=>1, :doctor_id=>2, :customer_care_id=>3, :sender_id=>1})
  {
      message: params[:message],
      user_id: params[:user_id],
      order_id: params[:order_id],
      doctor_id: params[:doctor_id],
      customer_care_id: params[:customer_care_id],
      sender_id: params[:sender_id],
    }
continue
    {
      message: params[:message],
      user_id: params[:user_id],
      order_id: params[:order_id],
      doctor_id: params[:doctor_id],
      customer_care_id: params[:customer_care_id],
      sender_id: params[:sender_id],
    }
reflex_data
 MessageReflex.new({:message=>"Hello, this is a test message!", :user_id=>1, :order_id=>1, :doctor_id=>2, :customer_care_id=>3, :sender_id=>1, :reflex_data=>{:current_user=>#<User id: 1, credit_card_number: nil, expiry: nil, cvv: nil, created_at: "2025-01-31 05:24:19.970590000 +0000", updated_at: "2025-01-31 05:24:19.970590000 +0000", email: "sherlene_jacobson@pouros-adams.test", is_doctor: false, role: "user">})
 MessageReflex.new({:message=>"Hello, this is a test message!", :user_id=>1, :order_id=>1, :doctor_id=>2, :customer_care_id=>3, :sender_id=>1, :reflex_data=>{:current_user=>#<User id: 1, credit_card_number: nil, expiry: nil, cvv: nil, created_at: "2025-01-31 05:24:19.970590000 +0000", updated_at: "2025-01-31 05:24:19.970590000 +0000", email: "sherlene_jacobson@pouros-adams.test", is_doctor: false, role: "user">}}
)
 MessageReflex.new({
      message: params[:message],
      user_id: params[:user_id],
      order_id: params[:order_id],
      doctor_id: params[:doctor_id],
      customer_care_id: params[:customer_care_id],
      sender_id: params[:sender_id],
      reflex_data: { current_user: user } # Mock the current_user
    })
 MessageReflex.new(mock_reflex_data)
reflex_data
 MessageReflex.new(reflex_data)
reflex_data
continue
 allow_any_instance_of(MessageReflex).to receive(:current_user).and_return(user)
receive(:current_user)
allow_any_instance_of(MessageReflex)
MessageReflex
continue
order.id.to_s
response.body
continue
current_user.orders
continue
params
params[:doctor]
params[:user]
Message.all
    @messages = Message.between_users(params[:user], params[:doctor], params[:customer_care])
continue
    @recipient = User.find_by(id: recipient_ids.first)
    recipient_ids = [params[:user], params[:doctor], params[:customer_care]].compact.map(&:to_i) - [current_user.id]
    @messages = Message.between_users(params[:user], params[:doctor], params[:customer_care])
current_user.orders
current_user.doctor?
current_user.customer_care?
params
continue
response
response.body
continue
message
customer_care.id
doctor
user
continue
chat_user.user?
 user = chat_user.user? ? user : nil
chat_user
continue
User.where(id: [params[:user], params[:customer_care]]).first.email
User.where(id: [params[:user], params[:customer_care]])
params[:doctor]== current_user.id.to_s
params[:doctor]== current_user.id
params
current_user.id
current_user
continue
@messages.delete_all
@messages.destroy_all
@messages.last
@messages
continue
@messages
messages
messges
@messges
continue
@messges
order
messages
params
@messages
continue
params
@messages
continue
@messages
continue
@messages
@messages%
continue
params
continue
params
 @messges = Message.between_users(params[:user], params[:doctor], params[:customer_care])
continue
params
 @messges = Message.between_users(params[:user], params[:doctor], params[:customer_care])
continue
params
continue
params
Message.between_users(params[:user_id], params[:doctor_id], params[:customer_care_id]).count
Message.between_users(params[:user_id], params[:doctor_id], params[:customer_care_id])
[200~Message.between_users(params[:user_id], params[:doctor_id], params[:customer_care_id])~
continue
params
@message
@message.save
continue
params
continue
Message.between_users(params[:user_id], params[:doctor_id], nil)
Message.between_users(params[:user_id], params[:doctor_id], params[customer_care_id])
params
@message.save
Message.between_users(params[:user_id], params[:doctor_id], params[customer_care_id]).count
Message.between_users(params[:user_id], params[:doctor_id], params[customer_care_id])
Message.between_users(params[:user_id], params[:doctor_id], params[customer_care_id]))
continue
Message.between_users(params[:user_id].to_i, params[:doctor_id].to_i, nil)
customer_care_id = params[:customer_care_id]
customer_care_id = params[:customer_care_id].to_i
doctor_id =  params[:doctor_id].to_i
user_id = params[:user_id].to_i
Message.between_users(params[:user_id].to_i, params[:doctor_id].to_i, params[:customer_care_id].to_i)-id
Message.between_users(params[:user_id].to_i, params[:doctor_id].to_i, params[:customer_care_id].to_i)
Message.last
params[:customer_care_id]
params[:doctor_id]
params[:user_id]
Message.between_users(params[:user_id], params[:doctor_id], params[:customer_care_id])
params
@message.save
continue
Message.between_users(params)
params
@message.save
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
Message.between_users(patient, current_user, customer_care)
current_user
patient
customer_care
continue
Message.between_users(patient, current_user, customer_care)
patient
customer_care
current_user
continue
current_user
user
Message.all
Message.where(
      "(user_id = :user_id AND doctor_id = :doctor_id) OR
       (user_id = :user_id AND customer_care_id = :customer_care_id) OR
       (doctor_id = :doctor_id AND customer_care_id = :customer_care_id)",
      user_id: user1.user? ? user1.id : user2.user? ? user2.id : nil,
      doctor_id: user1.doctor? ? user1.id : user2.doctor? ? user2.id : nil,
      customer_care_id: user1.customer_care? ? user1.id : user2.customer_care? ? user2.id : nil
    )
user2=current_user
user1 =user
Message.where(user_id: [user.id, current_user.id], customer_care_id: [user.id, current_user.id], doctor_id: [user.id, current_user.id])
current_user
user
Message.between_users(current_user, user)
current_user
user
continue
Message.between_users(current_user, user)
user
current_user
user
continue
doctor = customer_care.nil? ? user : nil 
doctor = customer_care.nil? ? doctor : nil
customer_care = user.customer_care? ? user : nil 
user.doctor
user
doctor = customer_care.nil? ? doctor : nil 
customer_care = user.customer_care? ? user : nil
user
continue
params
continue
params
continue
 @message.sender_id = User.first.id
 @message.sender = User.first
 @message
 @message.errors
 @message.save
continue
current_uer
curren_ser
crrent_user
cuetser
current_use
continue
params
continue
next
Message.count
next
continue
msg.errors
msg.valid?
msg = Message.new(user: user, order: order, message: 'What is the dosage?')
msg = _
m.valid?
m = _
Message.new(user: user, order: order, message: 'What is the dosage?')
_
next
_
Message.count
next
continue
o.errors
o.save
o.user
o.doctor
order.doctor
o = Order.new(user: user, doctor: doctor, order_items: order_items, total: 450.00)
continue
o.save
o.valid?
o = Order.new(user: user, doctor: doctor, order_items: order_items, total: 450.00)
